import {parse} from "papaparse"
describe('Generates data', () => {

    beforeEach(() => {
        cy.visit('http://localhost:3000/')
    })

    it('Checks if a error message is displayed when there is no Key value added to the prop, then close the message', () => {
        cy.get('#btn-add-prop')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Category 1 not specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Category 1 not specified")')
    })

    it('Check if a error message is displayed when there is no option selected in the additional options dropdown, then close the message', () => {
        cy.get('#select-key-drop-basic')
            .select('age')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Category 2 not specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Category 2 not specified")')
    })

    it('Checks if Key Values selected are added to the prop, then clear them', () => {
        //--------- First Name ---------
        cy.get('#select-key-drop-basic')
            .select('firstName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'firstName')
        //--------- Last Name ---------
        cy.get('#select-key-drop-basic')
            .select('lastName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'lastName')
        //--------- Email ---------
        cy.get('#select-key-drop-basic')
            .select('email')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'email')
        //--------- Age ---------
        cy.get('#select-key-drop-basic')
            .select('age')
        cy.get('#select-key-drop-age')
            .select('any')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'age')
        //--------- Address ---------
        cy.get('#select-key-drop-basic')
            .select('address')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'address')
        //--------- Full Name ---------
        cy.get('#select-key-drop-basic')
            .select('name')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'name')
        //--------- Vehicle ---------
        cy.get('#select-key-drop-basic')
            .select('vehicle')
        cy.get('#select-key-drop-car')
            .select('car')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'vehicle')
        //--------- Yes/No ---------
        cy.get('#select-key-drop-basic')
            .select('yes/no')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'yes/no')
        //--------- Language ---------
        cy.get('#select-key-drop-basic')
            .select('language')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'language')
        //--------- Phone No ---------
        cy.get('#select-key-drop-basic')
            .select('phoneNo')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'phoneNo')

        // Clear the prop
        cy.get('#btn-clear-object')
            .click()
        cy.get('#object-props > ul')
            .should('be.empty')
    })

    it('Checks if a error message is displayed when adding a custom key without a input value or a selection from the dropdown, then close the error message', () => {
        cy.get('#btn-add-custom')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Custom key and value must be specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Custom key and value must be specified")')
    })

    it('Checks if a error message is displayed when adding a custom key with a input value but no selection from the dropdown, then close the error message', () => {
        cy.get('#custom-input')
            .type("firstName")
        cy.get('#btn-add-custom')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Custom key and value must be specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Custom key and value must be specified")')
    })

    it('Checks if a error message is displayed when adding a custom key without a input value but with a selection from the dropdown, then close the error message', () => {
        cy.get('#value-select-custom')
            .select('firstName')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Custom key and value must be specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Custom key and value must be specified")')
    })

    it('Checks if a error message is displayed when adding a custom key with a input value, a selection from the dropdown but without a selection from the aditional dropdwon, then close the error message', () => {
        cy.get('#custom-input')
            .type("age")
        cy.get('#value-select-custom')
            .select('age')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: Custom key and value must be specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: Custom key and value must be specified")')
    })

    it('Checks if the custom values are added to the prop, then clear them', () => {
        //--------- First Name ---------
        cy.get('#custom-input')
            .type("firstName")
        cy.get('#value-select-custom')
            .select('firstName')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'firstName')
        //--------- Last Name ---------
        cy.get('#custom-input')
            .type("lastName")
        cy.get('#value-select-custom')
            .select('lastName')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'lastName')
        //--------- Email ---------
        cy.get('#custom-input')
            .type("email")
        cy.get('#value-select-custom')
            .select('email')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'email')
        //--------- Age ---------
        cy.get('#custom-input')
            .type("age")
        cy.get('#value-select-custom')
            .select('age')
        cy.get('#select-key-drop-age-custom')
            .select('any')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'age')
        //--------- Address ---------
        cy.get('#custom-input')
            .type("address")
        cy.get('#value-select-custom')
            .select('address')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'address')
        //--------- Full Name ---------
        cy.get('#custom-input')
            .type("name")
        cy.get('#value-select-custom')
            .select('name')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'name')
        //--------- Vehicle ---------
        cy.get('#custom-input')
            .type("vehicle")
        cy.get('#value-select-custom')
            .select('vehicle')
        cy.get('#select-key-drop-car-custom')
            .select('car')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'vehicle')
        //--------- Yes/No ---------
        cy.get('#custom-input')
            .type("yes/no")
        cy.get('#value-select-custom')
            .select('yes/no')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'yes/no')
        //--------- Language ---------
        cy.get('#custom-input')
            .type("language")
        cy.get('#value-select-custom')
            .select('language')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'language')
        //--------- Phone No ---------
        cy.get('#custom-input')
            .type("phoneNo")
        cy.get('#value-select-custom')
            .select('phoneNo')
        cy.get('#btn-add-custom')
            .click()
        cy.get('#object-props > ul')
            .should('contain.text', 'phoneNo')

        // Clear the prop
        cy.get('#btn-clear-object')
            .click()
        cy.get('#object-props > ul')
            .should('be.empty')
    })

    it('Checks if a error message is displayed when generating a CSV with no values in the prop and no entries inputted', () => {
        cy.get('#btn-get-data')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: No entries value specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: No entries value specified")')
    })

    it('Checks if a error message is displayed when generating a CSV with values in the prop and no entries inputted', () => {
        cy.get('#select-key-drop-basic')
            .select('firstName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('lastName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#btn-get-data')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: No entries value specified')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: No entries value specified")')
    })

    it('Checks if a error message is displayed when generating a CSV with no values in the prop and entries inputted', () => {
        cy.get('#entries-input')
            .type('10')
        cy.get('#btn-get-data')
            .click()
        cy.get('#error-box')
            .invoke('text')
            .should('contain', 'Error: No properties selected')
        cy.get('#btn-error-confirm')
            .click()
        cy.get('body')
            .not(':contains("Error: No properties selected")')
    })

    it('Resets the CSV file after generating it', () => {
        cy.get('#select-key-drop-basic')
            .select('firstName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('lastName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#entries-input')
            .type('10')
        cy.get('#btn-get-data')
            .click()
        cy.get('#btn-arr-data')
            .invoke('text')
            .should('contain', 'Arrange CSV')    
        cy.get('#btn-resCSV-data')
            .click()
        cy.get('#btn-get-data')
            .invoke('text')
            .should('contain', 'Generate CSV')    
    })

    it('Resets the CSV file after arrenging it', () => {
        cy.get('#select-key-drop-basic')
            .select('firstName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('lastName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#entries-input')
            .type('10')
        cy.get('#btn-get-data')
            .click()
        cy.get('#btn-arr-data')
            .click()
        cy.get('#btn-download-data')
            .invoke('text')
            .should('contain', 'Download CSV')     
        cy.get('#btn-resCSV-data')
            .click()
        cy.get('#btn-get-data')
            .invoke('text')
            .should('contain', 'Generate CSV')    
    })

    it('Generates, arranges and downloads a CSV file with the values required', () => {
        cy.get('#select-key-drop-basic')
            .select('name')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('firstName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('lastName')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('email')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('address')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#select-key-drop-basic')
            .select('vehicle')
        cy.get('#select-key-drop-car')
            .select('car')
        cy.get('#btn-add-prop')
            .click()
        cy.get('#entries-input')
            .type('5')
            cy.contains('Reset CSV').click()
            cy.contains('Generate CSV').click()
            cy.contains('Arrange CSV').click()
            cy.contains('Download CSV').click()
    })
})

describe('Convert CSV file in JSON file', function(){
    let allData        
    before(()=>{
        cy.readFile('C:/data/cypress/downloads/generatedBy_react-csv.csv', 'ascii')
            .then(str =>{
                cy.writeFile('C:/data/cypress/fixtures/testDataFromCSV.json', parse(str, {header:true}), 'ascii')
            })
        cy.fixture('testDataFromCSV.json', 'ascii')
            .as('dataJson')
            .then(dataJson => {
                allData = dataJson
            })
    })

    it('Log the data from the CSV to the JSON file', function(){       
        allData.data.forEach(data =>{
            cy.log(data.name)
            cy.log(data.firstName)
            cy.log(data.lastName)
            cy.log(data.email)
            cy.log(data.address)
            cy.log(data.vehicle)
        })
    })

    it('Use JSON Data in hte HTML form', function(){ 
        allData.data.forEach(data =>{
            cy.visit('http://localhost/2iTesting/form.html')
            cy.fixture("testDataFromCSV.json", 'ascii')
                .as('dataJson')
                .then((dataJson)=>{
                    allData = JSON.stringify(dataJson)                
                    cy.get('[cy-data="firstname"]')
                        .type(data.firstName)
                    cy.get('[cy-data="lastname"]')
                        .type(data.lastName)
                    cy.get('[cy-data="email"]')
                        .type(data.email);
                    cy.get('[cy-data="address"]')
                        .type(data.address);
                    cy.get('[cy-data="vehicle"]')
                        .type(data.vehicle);
                    cy.get('[cy-data="submit"]')
                        .click()
                })
        })
    })
})